// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


func evenFibonacciNumbersSum() -> Int {
    
    // init first two Fibonacci numbers
    // init sum is 2 (counting only even numbers)
    var result = 2
    var firstFibonacci = 1
    var secondFibonacci = 2
    
    while true  {
        
        // new (next) number is a sum of two previous numbers
        let nextFibonacci = firstFibonacci + secondFibonacci
        
        // check if new Fib number is even
        if nextFibonacci % 2 == 0 {
            // if even - add to result
            result += nextFibonacci
        }
        
        // if new Fib number hit 4M - no more calculations
        if nextFibonacci > 4000000 {
            return result
        }
        
        // to move on we need to reassign values
        firstFibonacci = secondFibonacci
        secondFibonacci = nextFibonacci
    }
}

print(evenFibonacciNumbersSum()) // will print 4613732

// my post on stackoverflow http://stackoverflow.com/a/40879558/6811766